name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Windows x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: libp2p-chat.exe
            archive-name: libp2p-chat-windows-x64

          - name: Linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: libp2p-chat
            archive-name: libp2p-chat-linux-x64

          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: libp2p-chat
            archive-name: libp2p-chat-linux-arm64

          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            bin: libp2p-chat
            archive-name: libp2p-chat-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache cargo & target directories
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
            ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          override: true

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation environment
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binary
        run: cargo build --verbose --locked --release --target ${{ matrix.platform.target }}

      - name: Package binary (Unix)
        if: matrix.platform.os != 'windows-latest'
        run: |
          cd target/${{ matrix.platform.target }}/release
          tar czf ../../../${{ matrix.platform.archive-name }}.tar.gz ${{ matrix.platform.bin }}
          cd -

      - name: Package binary (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          cd target/${{ matrix.platform.target }}/release
          7z a ../../../${{ matrix.platform.archive-name }}.zip ${{ matrix.platform.bin }}
          cd -

      - name: Upload artifact (Unix)
        if: matrix.platform.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive-name }}
          path: ${{ matrix.platform.archive-name }}.tar.gz

      - name: Upload artifact (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive-name }}
          path: ${{ matrix.platform.archive-name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/libp2p-chat-windows-x64/libp2p-chat-windows-x64.zip
            artifacts/libp2p-chat-linux-x64/libp2p-chat-linux-x64.tar.gz
            artifacts/libp2p-chat-linux-arm64/libp2p-chat-linux-arm64.tar.gz
            artifacts/libp2p-chat-macos-arm64/libp2p-chat-macos-arm64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}